1
На чём основано ООП?
ООП основано на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса.
Основные принципы :
1)Инкапсуляция - приватные/защищенные/публичиные данные. К 2 и 3-им доступ можно получить внутри класса или через "дружбу"
2)Полиморфизм- различные интерпритации одного объекта. Такие как перегрузки.
3)Наследование - потомки наследуют свойства родителей.

2
1)по умолчанию класс приватный в отличии от структуры
2)небольшие классы пишем в "местном" cpp,где и main(). Для больших размеров удобнее использовать файлы hpp(представление),cpp(реализация)
3)Небольшие функции пишем в классе.Большего размера - выносим в отдельный файл
4)использование инкапсуляции

3
1)Меняя Hpp файл перекомпилируются все указанные файлы в нем. В cpp только один. Что удобно если проект большой и занимает длительное время на запуск, и при наличии ошибок не 
потребуется долго ждать.
2)Меньше проблем с совместимостью версий
3)Ключевым моментом здесь является то, что реализация всех методов и функций может находиться совершенно в другом месте, в другом файле.
Зачастую объявление функций осуществляется в заголовочных файлах с расширением .h , а реализация осуществляется в файлах исходных кодов .cpp.

4
static - внутреннее связывание(удобно для сохранения переменных),extern - внешнее
Внешний объект виден всем еденицам трансляции,внутренний - только внутри еденицы трансляции

5
1)Получаем доступ через ::
2)Пространства могут иметь подпространства
3)Можно создавать псевдонимы
4)Пространства имен с одинаковыми названиями(все что внутри, где бы это не располагалось - общее)
